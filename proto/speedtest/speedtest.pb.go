// /proto/speedtest.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: speedtest.proto

package speedtest

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a test server.
type ServerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"` // gRPC endpoint URL (e.g., "grpc.speedtest.example.com:443")
	Region        string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City          string                 `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Country       string                 `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"` // ISO 3166-1 alpha-2 code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	mi := &file_speedtest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{0}
}

func (x *ServerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ServerInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ServerInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ServerInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// Request to get servers. Can include client hints.
type GetServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // Optional limit on number of servers returned
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServersRequest) Reset() {
	*x = GetServersRequest{}
	mi := &file_speedtest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersRequest) ProtoMessage() {}

func (x *GetServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersRequest.ProtoReflect.Descriptor instead.
func (*GetServersRequest) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{1}
}

func (x *GetServersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response containing a list of servers.
type GetServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*ServerInfo          `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServersResponse) Reset() {
	*x = GetServersResponse{}
	mi := &file_speedtest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersResponse) ProtoMessage() {}

func (x *GetServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersResponse.ProtoReflect.Descriptor instead.
func (*GetServersResponse) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{2}
}

func (x *GetServersResponse) GetServers() []*ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

// Request for a latency ping.
type PingRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ServerId                string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                                                   // ID of the server being pinged (for context)
	ClientTimestampUnixNano int64                  `protobuf:"varint,2,opt,name=client_timestamp_unix_nano,json=clientTimestampUnixNano,proto3" json:"client_timestamp_unix_nano,omitempty"` // Client timestamp before sending
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_speedtest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{3}
}

func (x *PingRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PingRequest) GetClientTimestampUnixNano() int64 {
	if x != nil {
		return x.ClientTimestampUnixNano
	}
	return 0
}

// Response for a latency ping.
type PingResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ClientTimestampUnixNano int64                  `protobuf:"varint,1,opt,name=client_timestamp_unix_nano,json=clientTimestampUnixNano,proto3" json:"client_timestamp_unix_nano,omitempty"` // Echoed back from request
	ServerTimestampUnixNano int64                  `protobuf:"varint,2,opt,name=server_timestamp_unix_nano,json=serverTimestampUnixNano,proto3" json:"server_timestamp_unix_nano,omitempty"` // Server timestamp upon receiving
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_speedtest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{4}
}

func (x *PingResponse) GetClientTimestampUnixNano() int64 {
	if x != nil {
		return x.ClientTimestampUnixNano
	}
	return 0
}

func (x *PingResponse) GetServerTimestampUnixNano() int64 {
	if x != nil {
		return x.ServerTimestampUnixNano
	}
	return 0
}

// Request to start a download test.
type DownloadRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	ServerId string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// Optional: Could include hints like requested duration or size,
	// but server streaming often relies on client closing the stream.
	ChunkSizeHintBytes int32 `protobuf:"varint,2,opt,name=chunk_size_hint_bytes,json=chunkSizeHintBytes,proto3" json:"chunk_size_hint_bytes,omitempty"` // Client preferred chunk size
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	mi := &file_speedtest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{5}
}

func (x *DownloadRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *DownloadRequest) GetChunkSizeHintBytes() int32 {
	if x != nil {
		return x.ChunkSizeHintBytes
	}
	return 0
}

// Represents a chunk of data for download/upload streams.
type DataChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_speedtest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{6}
}

func (x *DataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Final response after the client finishes uploading data.
type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BytesReceived int64                  `protobuf:"varint,1,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_speedtest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{7}
}

func (x *UploadResponse) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

// Request to get the client's IP address.
type GetClientIPRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClientIPRequest) Reset() {
	*x = GetClientIPRequest{}
	mi := &file_speedtest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientIPRequest) ProtoMessage() {}

func (x *GetClientIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientIPRequest.ProtoReflect.Descriptor instead.
func (*GetClientIPRequest) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{8}
}

// Response containing the client's IP address.
type GetClientIPResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	ClientIp string                 `protobuf:"bytes,1,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// Optional: GeoIP info
	City          string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Country       string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClientIPResponse) Reset() {
	*x = GetClientIPResponse{}
	mi := &file_speedtest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientIPResponse) ProtoMessage() {}

func (x *GetClientIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speedtest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientIPResponse.ProtoReflect.Descriptor instead.
func (*GetClientIPResponse) Descriptor() ([]byte, []int) {
	return file_speedtest_proto_rawDescGZIP(), []int{9}
}

func (x *GetClientIPResponse) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *GetClientIPResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetClientIPResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

var File_speedtest_proto protoreflect.FileDescriptor

const file_speedtest_proto_rawDesc = "" +
	"\n" +
	"\x0fspeedtest.proto\x12\tspeedtest\"t\n" +
	"\n" +
	"ServerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x16\n" +
	"\x06region\x18\x03 \x01(\tR\x06region\x12\x12\n" +
	"\x04city\x18\x04 \x01(\tR\x04city\x12\x18\n" +
	"\acountry\x18\x05 \x01(\tR\acountry\")\n" +
	"\x11GetServersRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\"E\n" +
	"\x12GetServersResponse\x12/\n" +
	"\aservers\x18\x01 \x03(\v2\x15.speedtest.ServerInfoR\aservers\"g\n" +
	"\vPingRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12;\n" +
	"\x1aclient_timestamp_unix_nano\x18\x02 \x01(\x03R\x17clientTimestampUnixNano\"\x88\x01\n" +
	"\fPingResponse\x12;\n" +
	"\x1aclient_timestamp_unix_nano\x18\x01 \x01(\x03R\x17clientTimestampUnixNano\x12;\n" +
	"\x1aserver_timestamp_unix_nano\x18\x02 \x01(\x03R\x17serverTimestampUnixNano\"a\n" +
	"\x0fDownloadRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x121\n" +
	"\x15chunk_size_hint_bytes\x18\x02 \x01(\x05R\x12chunkSizeHintBytes\"\x1f\n" +
	"\tDataChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"7\n" +
	"\x0eUploadResponse\x12%\n" +
	"\x0ebytes_received\x18\x01 \x01(\x03R\rbytesReceived\"\x14\n" +
	"\x12GetClientIPRequest\"`\n" +
	"\x13GetClientIPResponse\x12\x1b\n" +
	"\tclient_ip\x18\x01 \x01(\tR\bclientIp\x12\x12\n" +
	"\x04city\x18\x02 \x01(\tR\x04city\x12\x18\n" +
	"\acountry\x18\x03 \x01(\tR\acountry2\xe1\x02\n" +
	"\x10SpeedTestService\x12I\n" +
	"\n" +
	"GetServers\x12\x1c.speedtest.GetServersRequest\x1a\x1d.speedtest.GetServersResponse\x127\n" +
	"\x04Ping\x12\x16.speedtest.PingRequest\x1a\x17.speedtest.PingResponse\x12>\n" +
	"\bDownload\x12\x1a.speedtest.DownloadRequest\x1a\x14.speedtest.DataChunk0\x01\x12;\n" +
	"\x06Upload\x12\x14.speedtest.DataChunk\x1a\x19.speedtest.UploadResponse(\x01\x12L\n" +
	"\vGetClientIP\x12\x1d.speedtest.GetClientIPRequest\x1a\x1e.speedtest.GetClientIPResponseB8Z6github.com/nathanmkaya/barry-go-server/proto/speedtestb\x06proto3"

var (
	file_speedtest_proto_rawDescOnce sync.Once
	file_speedtest_proto_rawDescData []byte
)

func file_speedtest_proto_rawDescGZIP() []byte {
	file_speedtest_proto_rawDescOnce.Do(func() {
		file_speedtest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_speedtest_proto_rawDesc), len(file_speedtest_proto_rawDesc)))
	})
	return file_speedtest_proto_rawDescData
}

var file_speedtest_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_speedtest_proto_goTypes = []any{
	(*ServerInfo)(nil),          // 0: speedtest.ServerInfo
	(*GetServersRequest)(nil),   // 1: speedtest.GetServersRequest
	(*GetServersResponse)(nil),  // 2: speedtest.GetServersResponse
	(*PingRequest)(nil),         // 3: speedtest.PingRequest
	(*PingResponse)(nil),        // 4: speedtest.PingResponse
	(*DownloadRequest)(nil),     // 5: speedtest.DownloadRequest
	(*DataChunk)(nil),           // 6: speedtest.DataChunk
	(*UploadResponse)(nil),      // 7: speedtest.UploadResponse
	(*GetClientIPRequest)(nil),  // 8: speedtest.GetClientIPRequest
	(*GetClientIPResponse)(nil), // 9: speedtest.GetClientIPResponse
}
var file_speedtest_proto_depIdxs = []int32{
	0, // 0: speedtest.GetServersResponse.servers:type_name -> speedtest.ServerInfo
	1, // 1: speedtest.SpeedTestService.GetServers:input_type -> speedtest.GetServersRequest
	3, // 2: speedtest.SpeedTestService.Ping:input_type -> speedtest.PingRequest
	5, // 3: speedtest.SpeedTestService.Download:input_type -> speedtest.DownloadRequest
	6, // 4: speedtest.SpeedTestService.Upload:input_type -> speedtest.DataChunk
	8, // 5: speedtest.SpeedTestService.GetClientIP:input_type -> speedtest.GetClientIPRequest
	2, // 6: speedtest.SpeedTestService.GetServers:output_type -> speedtest.GetServersResponse
	4, // 7: speedtest.SpeedTestService.Ping:output_type -> speedtest.PingResponse
	6, // 8: speedtest.SpeedTestService.Download:output_type -> speedtest.DataChunk
	7, // 9: speedtest.SpeedTestService.Upload:output_type -> speedtest.UploadResponse
	9, // 10: speedtest.SpeedTestService.GetClientIP:output_type -> speedtest.GetClientIPResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_speedtest_proto_init() }
func file_speedtest_proto_init() {
	if File_speedtest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_speedtest_proto_rawDesc), len(file_speedtest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speedtest_proto_goTypes,
		DependencyIndexes: file_speedtest_proto_depIdxs,
		MessageInfos:      file_speedtest_proto_msgTypes,
	}.Build()
	File_speedtest_proto = out.File
	file_speedtest_proto_goTypes = nil
	file_speedtest_proto_depIdxs = nil
}
