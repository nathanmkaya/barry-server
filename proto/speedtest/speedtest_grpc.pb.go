// /proto/speedtest.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: speedtest.proto

package speedtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpeedTestService_GetServers_FullMethodName  = "/speedtest.SpeedTestService/GetServers"
	SpeedTestService_Ping_FullMethodName        = "/speedtest.SpeedTestService/Ping"
	SpeedTestService_Download_FullMethodName    = "/speedtest.SpeedTestService/Download"
	SpeedTestService_Upload_FullMethodName      = "/speedtest.SpeedTestService/Upload"
	SpeedTestService_GetClientIP_FullMethodName = "/speedtest.SpeedTestService/GetClientIP"
)

// SpeedTestServiceClient is the client API for SpeedTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeedTestServiceClient interface {
	// Fetches a list of suitable test servers.
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
	// Performs a simple ping to measure latency.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Initiates a download test - server streams data to the client.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error)
	// Initiates an upload test - client streams data to the server.
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, UploadResponse], error)
	// Gets the client's public IP address as seen by the server.
	GetClientIP(ctx context.Context, in *GetClientIPRequest, opts ...grpc.CallOption) (*GetClientIPResponse, error)
}

type speedTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeedTestServiceClient(cc grpc.ClientConnInterface) SpeedTestServiceClient {
	return &speedTestServiceClient{cc}
}

func (c *speedTestServiceClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, SpeedTestService_GetServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedTestServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SpeedTestService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedTestServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpeedTestService_ServiceDesc.Streams[0], SpeedTestService_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, DataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeedTestService_DownloadClient = grpc.ServerStreamingClient[DataChunk]

func (c *speedTestServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpeedTestService_ServiceDesc.Streams[1], SpeedTestService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataChunk, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeedTestService_UploadClient = grpc.ClientStreamingClient[DataChunk, UploadResponse]

func (c *speedTestServiceClient) GetClientIP(ctx context.Context, in *GetClientIPRequest, opts ...grpc.CallOption) (*GetClientIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientIPResponse)
	err := c.cc.Invoke(ctx, SpeedTestService_GetClientIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeedTestServiceServer is the server API for SpeedTestService service.
// All implementations must embed UnimplementedSpeedTestServiceServer
// for forward compatibility.
type SpeedTestServiceServer interface {
	// Fetches a list of suitable test servers.
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	// Performs a simple ping to measure latency.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Initiates a download test - server streams data to the client.
	Download(*DownloadRequest, grpc.ServerStreamingServer[DataChunk]) error
	// Initiates an upload test - client streams data to the server.
	Upload(grpc.ClientStreamingServer[DataChunk, UploadResponse]) error
	// Gets the client's public IP address as seen by the server.
	GetClientIP(context.Context, *GetClientIPRequest) (*GetClientIPResponse, error)
	mustEmbedUnimplementedSpeedTestServiceServer()
}

// UnimplementedSpeedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeedTestServiceServer struct{}

func (UnimplementedSpeedTestServiceServer) GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedSpeedTestServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSpeedTestServiceServer) Download(*DownloadRequest, grpc.ServerStreamingServer[DataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedSpeedTestServiceServer) Upload(grpc.ClientStreamingServer[DataChunk, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSpeedTestServiceServer) GetClientIP(context.Context, *GetClientIPRequest) (*GetClientIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientIP not implemented")
}
func (UnimplementedSpeedTestServiceServer) mustEmbedUnimplementedSpeedTestServiceServer() {}
func (UnimplementedSpeedTestServiceServer) testEmbeddedByValue()                          {}

// UnsafeSpeedTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeedTestServiceServer will
// result in compilation errors.
type UnsafeSpeedTestServiceServer interface {
	mustEmbedUnimplementedSpeedTestServiceServer()
}

func RegisterSpeedTestServiceServer(s grpc.ServiceRegistrar, srv SpeedTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpeedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpeedTestService_ServiceDesc, srv)
}

func _SpeedTestService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTestServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTestService_GetServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTestServiceServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedTestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTestService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTestServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedTestService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeedTestServiceServer).Download(m, &grpc.GenericServerStream[DownloadRequest, DataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeedTestService_DownloadServer = grpc.ServerStreamingServer[DataChunk]

func _SpeedTestService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeedTestServiceServer).Upload(&grpc.GenericServerStream[DataChunk, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeedTestService_UploadServer = grpc.ClientStreamingServer[DataChunk, UploadResponse]

func _SpeedTestService_GetClientIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTestServiceServer).GetClientIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTestService_GetClientIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTestServiceServer).GetClientIP(ctx, req.(*GetClientIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeedTestService_ServiceDesc is the grpc.ServiceDesc for SpeedTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeedTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speedtest.SpeedTestService",
	HandlerType: (*SpeedTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _SpeedTestService_GetServers_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SpeedTestService_Ping_Handler,
		},
		{
			MethodName: "GetClientIP",
			Handler:    _SpeedTestService_GetClientIP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _SpeedTestService_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _SpeedTestService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "speedtest.proto",
}
